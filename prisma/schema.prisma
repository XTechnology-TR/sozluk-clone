
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    avatar            String?
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String    @unique
    email         String    @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    emailVerified DateTime?
    avatar        String?
    password      String
    accounts      Account[]
    sessions      Session[]
    entry         Entry[]
    feed          Feed[]
    likes         Likes[]
    title         Title[]
    messagesSent  Message[]    @relation("sender")
    messagesReceived Message[]    @relation("recipient")

}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


model Entry{
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
    userId    String
    entryId   String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    title     Title    @relation(fields: [entryId], references: [id])
    likes     Likes[]
    avatar    String?
    postUrl   String?
}

model Feed{
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}

model Likes {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  entry     Entry    @relation(fields: [LikeId], references: [id])
  LikeId    String
  createdAt DateTime @default(now())

}

model Title{
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    content   String
    userId    String
    tagId     String
    user      User     @relation(fields: [userId], references: [id])
    tag       Tag    @relation(fields: [tagId], references: [id])
    count     Int
    entry     Entry[]

}

 model Tag {
    id String @id @default(cuid())
    title Title[]
    name String
    slug String @unique

    }

    model Message {
  id          String   @id @default(uuid())
  sender      User     @relation("sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
  message      String
  image       String?
  createdAt   DateTime @default(now())
}