generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  avatar            String?
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String      @id @default(cuid())
  name             String      @unique
  email            String      @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  emailVerified    DateTime?
  birthDate        DateTime?
  avatar           String?
  password         String
  accounts         Account[]
  sessions         Session[]
  entry            Entry[]
  favorites        Favorites[]
  topic            Topic[]
  followersCount   BigInt      @default(0)
  followingCount   BigInt      @default(0)
  entryCount       BigInt      @default(0)
  image            String?
  role             Role        @default(Noob)
  messagesSent     Message[]   @relation("sender")
  messagesReceived Message[]   @relation("recipient")
  followers        Follower[]  @relation("follower")
  following        Follower[]  @relation("following")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Entry {
  id        String   @id @default(uuid())
  createdAt DateTime    @default(now())
  content   String
  userId    String
  entryId   String
  user      User        @relation(fields: [userId], references: [id])
  topic     Topic       @relation(fields: [entryId], references: [id], onDelete: Cascade)
  favorites Favorites[]
  avatar    String?
  postUrl   String?
  favoriteCount Int         @default(0)




  @@index([entryId])
  @@index([userId])


}

model Favorites {
  id       String    @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  entryId   String
  entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  favorite  Boolean  @default(false)

}

model Topic {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  topicTitle      String   @unique
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  entry           Entry[]

  @@index([topicTitle])
  @@unique([topicTitle])

}

model Tag {
  id      String   @id @default(uuid())
  tagId   String
  tagName String
}

model Message {
  id          String   @id @default(uuid())
  sender      User     @relation("sender", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("recipient", fields: [recipientId], references: [id])
  recipientId String
  message     String
  image       String?
  createdAt   DateTime @default(now())
}

enum Role {
  Noob
  Author
}

model Follower {
  id          String   @id @default(uuid())
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
}


